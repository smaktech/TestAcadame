{"version":3,"sources":["../node_modules/numeral/numeral.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/useController.ts","../../src/useWatch.ts","../../src/useFormState.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../../src/validateFieldsNatively.ts","../../src/toNestError.ts","../../src/yup.ts"],"names":["define","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","element","data","Date","isObjectType","isNullOrUndefined","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","some","current","substring","getNodeParentName","Boolean","undefined","path","defaultValue","result","compact","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","subscription","disabled","subject","subscribe","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","map","fieldName","watchAll","isFunction","useController","methods","control","shouldUnregister","isArrayField","isNameInFieldArray","_name","_subjects","shouldSubscribeByName","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useWatch","_defaultValues","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","shouldRenderFormState","state","getProxyFormState","useFormState","registerProps","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","keepDefaultValue","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","focusFieldBy","fields","fieldsNames","refs","isBlurEvent","has","watchName","cloneObject","Set","createSubject","_observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","objectRef","currentPaths","currentPathsLength","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","maxLength","minLength","pattern","schemaErrorLookup","foundError","pop","isSubmitted","reValidateMode","getValidateError","isMessage","validationData","isRegex","inputValue","a","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","live","getValues","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","isWatched","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetField","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl","validateFieldsNatively","fieldPath","toNestError","fieldErrors","assign","yupResolver","schema","schemaOptions","resolverOptions","abortEarly","inner","messages"],"mappings":"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","file":"static/js/132.bacfbb83.chunk.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import * as React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import { get, FieldError, ResolverOptions } from 'react-hook-form';\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      const error = get(errors, fieldPath) as FieldError | undefined;\n\n      field.ref.setCustomValidity((error && error.message) || '');\n\n      field.ref.reportValidity();\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"sourceRoot":""}