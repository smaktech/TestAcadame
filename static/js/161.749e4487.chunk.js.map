{"version":3,"sources":["sections/auth/verify-code/VerifyCodeForm.js","pages/auth/VerifyCode.js"],"names":["maxLength","object","target","value","length","slice","VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","formik","useFormik","initialValues","validationSchema","onSubmit","a","Promise","resolve","setTimeout","variant","PATH_DASHBOARD","root","values","errors","isValid","touched","isSubmitting","handleSubmit","getFieldProps","autoComplete","noValidate","Stack","direction","spacing","justifyContent","Object","keys","map","item","OutlinedInput","type","placeholder","onInput","error","Boolean","inputProps","sx","p","textAlign","width","xs","sm","height","FormHelperText","style","LoadingButton","fullWidth","size","loading","mt","RootStyle","styled","display","alignItems","padding","theme","VerifyCode","Page","title","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","PATH_AUTH","login","startIcon","Iconify","icon","mb","Typography","paragraph","color","align","Link","underline","onClick"],"mappings":"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","file":"static/js/161.749e4487.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// @mui\nimport { OutlinedInput, FormHelperText, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\n// ----------------------------------------------------------------------\n\n// eslint-disable-next-line consistent-return\nfunction maxLength(object) {\n  if (object.target.value.length > object.target.maxLength) {\n    return (object.target.value = object.target.value.slice(0, object.target.maxLength));\n  }\n}\n\nexport default function VerifyCodeForm() {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.number().required('Code is required'),\n    code2: Yup.number().required('Code is required'),\n    code3: Yup.number().required('Code is required'),\n    code4: Yup.number().required('Code is required'),\n    code5: Yup.number().required('Code is required'),\n    code6: Yup.number().required('Code is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      code1: '',\n      code2: '',\n      code3: '',\n      code4: '',\n      code5: '',\n      code6: '',\n    },\n    validationSchema: VerifyCodeSchema,\n    onSubmit: async () => {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      enqueueSnackbar('Verify success', { variant: 'success' });\n      navigate(PATH_DASHBOARD.root);\n    },\n  });\n\n  const { values, errors, isValid, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n          {Object.keys(values).map((item) => (\n            <OutlinedInput\n              key={item}\n              {...getFieldProps(item)}\n              type=\"number\"\n              placeholder=\"-\"\n              onInput={maxLength}\n              error={Boolean(touched[item] && errors[item])}\n              inputProps={{\n                maxLength: 1,\n                sx: {\n                  p: 0,\n                  textAlign: 'center',\n                  width: { xs: 36, sm: 56 },\n                  height: { xs: 36, sm: 56 },\n                },\n              }}\n            />\n          ))}\n        </Stack>\n\n        <FormHelperText error={!isValid} style={{ textAlign: 'right' }}>\n          {!isValid && 'Code is required'}\n        </FormHelperText>\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\n          Verify\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\n// sections\nimport { VerifyCodeForm } from '../../sections/auth/verify-code';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  height: '100%',\n  alignItems: 'center',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCode() {\n  return (\n    <Page title=\"Verify\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <Container>\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n            <Button\n              size=\"small\"\n              component={RouterLink}\n              to={PATH_AUTH.login}\n              startIcon={<Iconify icon={'eva:arrow-ios-back-fill'} width={20} height={20} />}\n              sx={{ mb: 3 }}\n            >\n              Back\n            </Button>\n\n            <Typography variant=\"h3\" paragraph>\n              Please check your email!\n            </Typography>\n            <Typography sx={{ color: 'text.secondary' }}>\n              We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify\n              your email.\n            </Typography>\n\n            <Box sx={{ mt: 5, mb: 3 }}>\n              <VerifyCodeForm />\n            </Box>\n\n            <Typography variant=\"body2\" align=\"center\">\n              Donâ€™t have a code? &nbsp;\n              <Link variant=\"subtitle2\" underline=\"none\" onClick={() => {}}>\n                Resend code\n              </Link>\n            </Typography>\n          </Box>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"sourceRoot":""}