{"version":3,"sources":["components/Breadcrumbs.js","components/HeaderBreadcrumbs.js","pages/overview/Block.js","pages/overview/mui/Autocomplete.js"],"names":["Breadcrumbs","links","activeLast","other","currentLink","last","name","listDefault","map","link","LinkItem","listActiveLast","variant","sx","maxWidth","overflow","whiteSpace","color","textOverflow","separator","component","width","height","borderRadius","bgcolor","href","icon","RouterLink","to","lineHeight","display","alignItems","mr","HeaderBreadcrumbs","action","heading","moreLink","mb","flexGrow","gutterBottom","flexShrink","mt","isString","target","rel","noWrap","Block","title","children","theme","alpha","palette","grey","p","minHeight","Label","RootStyle","styled","paddingTop","spacing","paddingBottom","options","AutocompleteComponent","useState","value","setValue","inputValue","setInputValue","pt","pb","mode","PATH_PAGE","components","columns","fullWidth","top100Films","getOptionLabel","option","renderInput","params","label","margin","typography","fontSize","disablePortal","autoHighlight","countries","renderOption","props","isoCode","code","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","phone","inputProps","autoComplete","flexDirection","onChange","event","newValue","onInputChange","newInputValue","freeSolo","disableClearable","InputProps","type","multiple","defaultValue","filterSelectedOptions","placeholder","disableCloseOnSelect","selected","checked","size"],"mappings":"8RAae,SAASA,EAAT,GAA+D,IAAD,EAAvCC,EAAuC,EAAvCA,MAAuC,IAAhCC,kBAAgC,SAATC,EAAS,iBACrEC,EAAW,UAAGC,eAAKJ,UAAR,aAAG,EAAaK,KAE3BC,EAAcN,EAAMO,KAAI,SAACC,GAAD,OAAU,cAACC,EAAD,CAA0BD,KAAMA,GAAjBA,EAAKH,SAEtDK,EAAiBV,EAAMO,KAAI,SAACC,GAAD,OAC/B,8BACGA,EAAKH,OAASF,EACb,cAACM,EAAD,CAAUD,KAAMA,IAEhB,cAAC,IAAD,CACEG,QAAQ,QACRC,GAAI,CACFC,SAAU,IACVC,SAAU,SACVC,WAAY,SACZC,MAAO,gBACPC,aAAc,YAPlB,SAUGd,KAdGK,EAAKH,SAoBjB,OACE,cAAC,IAAD,yBACEa,UAAW,cAAC,IAAD,CAAKC,UAAU,OAAOP,GAAI,CAAEQ,MAAO,EAAGC,OAAQ,EAAGC,aAAc,MAAOC,QAAS,oBACtFrB,GAFN,aAIGD,EAAaK,EAAcI,KAelC,SAASD,EAAT,GAA6B,IAATD,EAAQ,EAARA,KACVgB,EAAqBhB,EAArBgB,KAAMnB,EAAeG,EAAfH,KAAMoB,EAASjB,EAATiB,KACpB,OACE,eAAC,IAAD,CAEEd,QAAQ,QACRQ,UAAWO,IACXC,GAAIH,GAAQ,IACZZ,GAAI,CACFgB,WAAY,EACZC,QAAS,OACTC,WAAY,SACZd,MAAO,eACP,UAAW,CAAEa,QAAS,YAV1B,UAaGJ,GAAQ,cAAC,IAAD,CAAKb,GAAI,CAAEmB,GAAI,EAAG,QAAS,CAAEX,MAAO,GAAIC,OAAQ,KAAhD,SAAyDI,IACjEpB,IAbIA,K,4LC9CI,SAAS2B,EAAT,GAA2F,IAA9DhC,EAA6D,EAA7DA,MAAOiC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,QAA8C,IAArCC,gBAAqC,MAApB,GAAoB,EAAhBvB,EAAgB,EAAhBA,GAAOV,EAAS,iBACvG,OACE,eAAC,IAAD,CAAKU,GAAE,aAAIwB,GAAI,GAAMxB,GAArB,UACE,eAAC,IAAD,CAAKA,GAAI,CAAEiB,QAAS,OAAQC,WAAY,UAAxC,UACE,eAAC,IAAD,CAAKlB,GAAI,CAAEyB,SAAU,GAArB,UACE,cAAC,IAAD,CAAY1B,QAAQ,KAAK2B,cAAY,EAArC,SACGJ,IAEH,cAAC,IAAD,aAAalC,MAAOA,GAAWE,OAGhC+B,GAAU,cAAC,IAAD,CAAKrB,GAAI,CAAE2B,WAAY,GAAvB,SAA6BN,OAG1C,cAAC,IAAD,CAAKrB,GAAI,CAAE4B,GAAI,GAAf,SACGC,mBAASN,GACR,cAAC,IAAD,CAAMX,KAAMW,EAAUO,OAAO,SAASC,IAAI,WAAWhC,QAAQ,QAA7D,SACGwB,IAGHA,EAAS5B,KAAI,SAACiB,GAAD,OACX,cAAC,IAAD,CACEoB,QAAM,EAENpB,KAAMA,EACNb,QAAQ,QACR+B,OAAO,SACPC,IAAI,WACJ/B,GAAI,CAAEiB,QAAS,SAPjB,SASGL,GAPIA,a,sKC3BZ,SAASqB,EAAT,GAAyC,IAAxBC,EAAuB,EAAvBA,MAAOlC,EAAgB,EAAhBA,GAAImC,EAAY,EAAZA,SACjC,OACE,eAAC,IAAD,CACEpC,QAAQ,WACRC,GAAI,CACFU,aAAc,IACdC,QAAS,SAACyB,GAAD,OAAWC,YAAMD,EAAME,QAAQC,KAAK,KAAM,OAJvD,UAOGL,GAAS,cAAC,IAAD,CAAYA,MAAOA,IAC7B,cAAC,IAAD,CACElC,GAAE,aACAwC,EAAG,EACHC,UAAW,KACRzC,GAJP,SAOGmC,OAYF,SAASO,EAAT,GAA2B,IAAVR,EAAS,EAATA,MACtB,OACE,cAAC,IAAD,CAAYnC,QAAQ,WAAWQ,UAAU,IAAImB,cAAY,EAAC1B,GAAI,CAAEI,MAAO,kBAAvE,SACG8B,M,2OC7BDS,EAAYC,YAAO,MAAPA,EAAc,gBAAGR,EAAH,EAAGA,MAAH,MAAgB,CAC9CS,WAAYT,EAAMU,QAAQ,IAC1BC,cAAeX,EAAMU,QAAQ,QAKzBE,EAAU,CAAC,WAAY,YAQd,SAASC,IACtB,MAA0BC,mBAASF,EAAQ,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEA,OACE,cAAC,IAAD,CAAMpB,MAAM,2BAAZ,SACE,eAACS,EAAD,WACE,cAAC,IAAD,CACE3C,GAAI,CACFuD,GAAI,EACJC,GAAI,EACJhC,GAAI,GACJb,QAAS,SAACyB,GAAD,MAAmC,UAAvBA,EAAME,QAAQmB,KAAmB,WAAa,aALvE,SAQE,cAAC,IAAD,UACE,cAAC,IAAD,CACEnC,QAAQ,eACRlC,MAAO,CAAC,CAAEK,KAAM,aAAcmB,KAAM8C,IAAUC,YAAc,CAAElE,KAAM,iBACpE8B,SAAS,gDAKf,cAAC,IAAD,UACE,eAAC,IAAD,CAASqC,QAAS,EAAGd,QAAS,EAA9B,UACE,cAAC,IAAD,CAAOZ,MAAM,YAAb,SACE,cAAC,IAAD,CACE2B,WAAS,EACTb,QAASc,IACTC,eAAgB,SAACC,GAAD,OAAYA,EAAO9B,OACnC+B,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,YAAYC,OAAO,eAI7E,cAAC,IAAD,CAAOlC,MAAM,iBAAb,SACE,cAAC,IAAD,CACElC,GAAI,CACFQ,MAAO,OACP,4BAA6B,CAC3B6D,WAAY,QACZ,WAAY,CAAElD,GAAI,EAAGmD,SAAU,MALrC,SASE,cAAC,IAAD,CACET,WAAS,EACTU,eAAa,EACbC,eAAa,EACbxB,QAASyB,IACTV,eAAgB,SAACC,GAAD,OAAYA,EAAOG,OACnCO,aAAc,SAACC,EAAOX,GAAR,OACZ,+CAAQW,GAAR,cACE,gCA3DCC,EA2DoBZ,EAAOa,KA1DT,qBAAzBC,OAAOC,cACjBH,EAAQI,cAAcC,QAAQ,MAAM,SAACC,GAAD,OAAUJ,OAAOC,cAAcG,EAAKC,WAAW,GAAK,WACxFP,KAyDiBZ,EAAOG,MAFV,KAEmBH,EAAOa,KAF1B,MAEmCb,EAAOoB,UA5D9D,IAAuBR,GA+DLX,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,mBACNkB,WAAU,2BACLnB,EAAOmB,YADF,IAERC,aAAc,2BAQ1B,cAAC,IAAD,CAAOpD,MAAM,uBAAuBlC,GAAI,CAAEuF,cAAe,UAAzD,SACE,qCACE,cAAC,IAAD,CACE1B,WAAS,EACTV,MAAOA,EACPH,QAASA,EACTwC,SAAU,SAACC,EAAOC,GAChBtC,EAASsC,IAEXrC,WAAYA,EACZsC,cAAe,SAACF,EAAOG,GACrBtC,EAAcsC,IAEhB3B,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,qBAExD,cAAC,IAAD,CAAYpE,QAAQ,QAAQC,GAAI,CAAE4B,GAAI,GAAtC,0BACY,OAAVuB,EAAA,WAAqBA,EAArB,KAAgC,UAElC,cAAC,IAAD,CAAYpD,QAAQ,QAApB,gCAA6CsD,EAA7C,YAIJ,eAAC,IAAD,CAAOnB,MAAM,YAAb,UACE,cAAC,IAAD,CACE2B,WAAS,EACTgC,UAAQ,EACR7C,QAASc,IAAYnE,KAAI,SAACqE,GAAD,OAAYA,EAAO9B,SAC5C+B,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,eACtDnE,GAAI,CAAEwB,GAAI,KAEZ,cAAC,IAAD,CACEqC,WAAS,EACTgC,UAAQ,EACRC,kBAAgB,EAChB9C,QAASc,IAAYnE,KAAI,SAACqE,GAAD,OAAYA,EAAO9B,SAC5C+B,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,eAAe4B,WAAU,2BAAO7B,EAAO6B,YAAd,IAA0BC,KAAM,oBAK5F,cAAC,IAAD,CAAO9D,MAAM,kBAAb,SACE,cAAC,IAAD,CACE+D,UAAQ,EACRpC,WAAS,EACTb,QAASc,IACTC,eAAgB,SAACC,GAAD,OAAYA,EAAO9B,OACnCgE,aAAc,CAACpC,IAAY,KAC3BqC,uBAAqB,EACrBlC,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,wBAAwBiC,YAAY,oBAKvE,cAAC,IAAD,CAAOlE,MAAM,aAAb,SACE,cAAC,IAAD,CACE2B,WAAS,EACToC,UAAQ,EACRjD,QAASc,IACTuC,sBAAoB,EACpBtC,eAAgB,SAACC,GAAD,OAAYA,EAAO9B,OACnCwC,aAAc,SAACC,EAAOX,EAAR,OAAkBsC,EAAlB,EAAkBA,SAAlB,OACZ,+CAAQ3B,GAAR,cACE,cAAC,IAAD,CAAU4B,QAASD,IAClBtC,EAAO9B,WAGZ+B,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,aAAaiC,YAAY,oBAInF,cAAC,IAAD,CAAOlE,MAAM,QAAb,SACE,qCACE,cAAC,IAAD,CACE2B,WAAS,EACTb,QAASc,IACTC,eAAgB,SAACC,GAAD,OAAYA,EAAO9B,OACnCgE,aAAcpC,IAAY,IAC1BG,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,cAAciC,YAAY,kBAElF,uBACA,cAAC,IAAD,CACEvC,WAAS,EACToC,UAAQ,EACRO,KAAK,QACLxD,QAASc,IACTC,eAAgB,SAACC,GAAD,OAAYA,EAAO9B,OACnCgE,aAAc,CAACpC,IAAY,KAC3BG,YAAa,SAACC,GAAD,OAAY,cAAC,IAAD,2BAAeA,GAAf,IAAuBC,MAAM,aAAaiC,YAAY","file":"static/js/88.fed7b143.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { last } from 'lodash';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link, Typography, Breadcrumbs as MUIBreadcrumbs } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nBreadcrumbs.propTypes = {\n  activeLast: PropTypes.bool,\n  links: PropTypes.array.isRequired,\n};\n\nexport default function Breadcrumbs({ links, activeLast = false, ...other }) {\n  const currentLink = last(links)?.name;\n\n  const listDefault = links.map((link) => <LinkItem key={link.name} link={link} />);\n\n  const listActiveLast = links.map((link) => (\n    <div key={link.name}>\n      {link.name !== currentLink ? (\n        <LinkItem link={link} />\n      ) : (\n        <Typography\n          variant=\"body2\"\n          sx={{\n            maxWidth: 260,\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {currentLink}\n        </Typography>\n      )}\n    </div>\n  ));\n\n  return (\n    <MUIBreadcrumbs\n      separator={<Box component=\"span\" sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }} />}\n      {...other}\n    >\n      {activeLast ? listDefault : listActiveLast}\n    </MUIBreadcrumbs>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nLinkItem.propTypes = {\n  link: PropTypes.shape({\n    href: PropTypes.string,\n    icon: PropTypes.any,\n    name: PropTypes.string,\n  }),\n};\n\nfunction LinkItem({ link }) {\n  const { href, name, icon } = link;\n  return (\n    <Link\n      key={name}\n      variant=\"body2\"\n      component={RouterLink}\n      to={href || '#'}\n      sx={{\n        lineHeight: 2,\n        display: 'flex',\n        alignItems: 'center',\n        color: 'text.primary',\n        '& > div': { display: 'inherit' },\n      }}\n    >\n      {icon && <Box sx={{ mr: 1, '& svg': { width: 20, height: 20 } }}>{icon}</Box>}\n      {name}\n    </Link>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// @mui\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport Breadcrumbs from './Breadcrumbs';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <Breadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" rel=\"noopener\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import PropTypes from 'prop-types';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport { Paper, CardHeader, Box, Typography } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nBlock.propTypes = {\n  children: PropTypes.any.isRequired,\n  sx: PropTypes.object,\n  title: PropTypes.string,\n};\n\nexport function Block({ title, sx, children }) {\n  return (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        borderRadius: 1.5,\n        bgcolor: (theme) => alpha(theme.palette.grey[500], 0.04),\n      }}\n    >\n      {title && <CardHeader title={title} />}\n      <Box\n        sx={{\n          p: 5,\n          minHeight: 180,\n          ...sx,\n        }}\n      >\n        {children}\n      </Box>\n    </Paper>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nLabel.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport function Label({ title }) {\n  return (\n    <Typography variant=\"overline\" component=\"p\" gutterBottom sx={{ color: 'text.secondary' }}>\n      {title}\n    </Typography>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Checkbox, Container, TextField, Typography, Autocomplete } from '@mui/material';\nimport { Masonry } from '@mui/lab';\n// routes\nimport { PATH_PAGE } from '../../../routes/paths';\nimport { top100Films, countries } from '../../../_mock';\n// components\nimport Page from '../../../components/Page';\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs';\n//\nimport { Block } from '../Block';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  paddingTop: theme.spacing(11),\n  paddingBottom: theme.spacing(15),\n}));\n\n// ----------------------------------------------------------------------\n\nconst options = ['Option 1', 'Option 2'];\n\nfunction countryToFlag(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined'\n    ? isoCode.toUpperCase().replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n    : isoCode;\n}\n\nexport default function AutocompleteComponent() {\n  const [value, setValue] = useState(options[0]);\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <Page title=\"Components: Autocomplete\">\n      <RootStyle>\n        <Box\n          sx={{\n            pt: 6,\n            pb: 1,\n            mb: 10,\n            bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n          }}\n        >\n          <Container>\n            <HeaderBreadcrumbs\n              heading=\"Autocomplete\"\n              links={[{ name: 'Components', href: PATH_PAGE.components }, { name: 'Autocomplete' }]}\n              moreLink=\"https://mui.com/components/autocomplete\"\n            />\n          </Container>\n        </Box>\n\n        <Container>\n          <Masonry columns={3} spacing={3}>\n            <Block title=\"Combo box\">\n              <Autocomplete\n                fullWidth\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                renderInput={(params) => <TextField {...params} label=\"Combo box\" margin=\"none\" />}\n              />\n            </Block>\n\n            <Block title=\"Country Select\">\n              <Box\n                sx={{\n                  width: '100%',\n                  '& .MuiAutocomplete-option': {\n                    typography: 'body2',\n                    '& > span': { mr: 1, fontSize: 20 },\n                  },\n                }}\n              >\n                <Autocomplete\n                  fullWidth\n                  disablePortal\n                  autoHighlight\n                  options={countries}\n                  getOptionLabel={(option) => option.label}\n                  renderOption={(props, option) => (\n                    <li {...props}>\n                      <span>{countryToFlag(option.code)}</span>\n                      {option.label} ({option.code}) +{option.phone}\n                    </li>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Choose a country\"\n                      inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password',\n                      }}\n                    />\n                  )}\n                />\n              </Box>\n            </Block>\n\n            <Block title=\" Controllable states\" sx={{ flexDirection: 'column' }}>\n              <>\n                <Autocomplete\n                  fullWidth\n                  value={value}\n                  options={options}\n                  onChange={(event, newValue) => {\n                    setValue(newValue);\n                  }}\n                  inputValue={inputValue}\n                  onInputChange={(event, newInputValue) => {\n                    setInputValue(newInputValue);\n                  }}\n                  renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n                />\n                <Typography variant=\"body2\" sx={{ mt: 2 }}>{`value: ${\n                  value !== null ? `'${value}'` : 'null'\n                }`}</Typography>\n                <Typography variant=\"body2\">{`inputValue: '${inputValue}'`}</Typography>\n              </>\n            </Block>\n\n            <Block title=\"Free solo\">\n              <Autocomplete\n                fullWidth\n                freeSolo\n                options={top100Films.map((option) => option.title)}\n                renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\n                sx={{ mb: 2 }}\n              />\n              <Autocomplete\n                fullWidth\n                freeSolo\n                disableClearable\n                options={top100Films.map((option) => option.title)}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Search input\" InputProps={{ ...params.InputProps, type: 'search' }} />\n                )}\n              />\n            </Block>\n\n            <Block title=\"Multiple Values\">\n              <Autocomplete\n                multiple\n                fullWidth\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                defaultValue={[top100Films[13]]}\n                filterSelectedOptions\n                renderInput={(params) => (\n                  <TextField {...params} label=\"filterSelectedOptions\" placeholder=\"Favorites\" />\n                )}\n              />\n            </Block>\n\n            <Block title=\"Checkboxes\">\n              <Autocomplete\n                fullWidth\n                multiple\n                options={top100Films}\n                disableCloseOnSelect\n                getOptionLabel={(option) => option.title}\n                renderOption={(props, option, { selected }) => (\n                  <li {...props}>\n                    <Checkbox checked={selected} />\n                    {option.title}\n                  </li>\n                )}\n                renderInput={(params) => <TextField {...params} label=\"Checkboxes\" placeholder=\"Favorites\" />}\n              />\n            </Block>\n\n            <Block title=\"Sizes\">\n              <>\n                <Autocomplete\n                  fullWidth\n                  options={top100Films}\n                  getOptionLabel={(option) => option.title}\n                  defaultValue={top100Films[13]}\n                  renderInput={(params) => <TextField {...params} label=\"Size Medium\" placeholder=\"Favorites\" />}\n                />\n                <br />\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  size=\"small\"\n                  options={top100Films}\n                  getOptionLabel={(option) => option.title}\n                  defaultValue={[top100Films[13]]}\n                  renderInput={(params) => <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />}\n                />\n              </>\n            </Block>\n          </Masonry>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"sourceRoot":""}